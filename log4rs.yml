# https://docs.rs/log4rs/1.0.0/log4rs/encode/pattern/index.html#formatters
# d, date - The current time. By default, the ISO 8601 format is used. A custom format may be provided in the syntax accepted by chrono. The timezone defaults to local, but can be specified explicitly by passing a second argument of utc for UTC or local for local time.
#     {d} - 2016-03-20T14:22:20.644420340-08:00
#     {d(%Y-%m-%d %H:%M:%S)} - 2016-03-20 14:22:20
#     {d(%Y-%m-%d %H:%M:%S %Z)(utc)} - 2016-03-20 22:22:20 UTC
# f, file - The source file that the log message came from, or ??? if not provided.
# h, highlight - Styles its argument according to the log level. The style is intense red for errors, red for warnings, blue for info, and the default style for all other levels.
#     {h(the level is {l})} - the level is ERROR
# l, level - The log level.
# L, line - The line that the log message came from, or ??? if not provided.
# m, message - The log message.
# M, module - The module that the log message came from, or ??? if not provided.
# P, pid - The current process id.
# n - A platform-specific newline.
# t, target - The target of the log message.
# T, thread - The name of the current thread.
# I, thread_id - The ID of the current thread.
# X, mdc - A value from the MDC. The first argument specifies the key, and the second argument specifies the default value if the key is not present in the MDC. The second argument is optional, and defaults to the empty string.
#     {X(user_id)} - 123e4567-e89b-12d3-a456-426655440000
#     {X(nonexistent_key)(no mapping)} - no mapping
# An "unnamed" formatter simply formats its argument, applying the format specification.
#     {({l} {m})} - INFO hello

appenders:
  # An appender named "stdout" that writes to stdout
  stdout:
    kind: console
    encoder:
      # pattern: "{d(%F %T%.3f%Z)} - {h({l})} - {t} - {m}{n}"
      pattern: "{d(%F %T%.3f%Z)} | {h({l})} | {f}:{L} | {m}{n}"

  file:
    kind: rolling_file
    path: "log/log.txt"
    append: false
    encoder:
      pattern: "{d(%F %T%.3f%Z)} | {h({l})} | {f}:{L} | {m}{n}"
    policy:
      kind: compound # 默认值, 即使用所有 policy
      trigger: # 当文件超过10mb 时触发 rotate
        kind: size
        limit: 5mb
      roller: # rotate 类型
        # kind: delete # 直接删除  原有  文件
        # 或者用 fixed_window
        kind: fixed_window
        pattern: "log/log-{}.txt" # 注意, 需要至少包含 "{}" 用于插入索引值
        base: 0 # 压缩日志索引值起点
        count: 10 # 最大保存压缩文件数

  json_file:
    kind: rolling_file
    path: "log/log.txt"
    append: false
    encoder:
      kind: json
      # pattern: "{d(%Y-%m-%d %H:%M:%S%.3f)} - {l} - {t} - {m}{n}"
    policy:
      kind: compound # 默认值, 即使用所有 policy
      trigger: # 当文件超过10mb 时触发 rotate
        kind: size
        limit: 5mb
      roller: # rotate 类型
        # kind: delete # 直接删除  原有  文件
        # 或者用 fixed_window
        kind: fixed_window
        pattern: "log/log-{}.txt" # 注意, 需要至少包含 "{}" 用于插入索引值
        base: 0 # 压缩日志索引值起点
        count: 10 # 最大保存压缩文件数

# Set the default logging level to "warn" and attach the "stdout" appender to the root
root:
  level: info
  appenders:
    - stdout
    # - file
    # - json_file
loggers:
  # Route log events sent to the "app" logger to the "file" appender,
  # and *not* the normal appenders installed at the root
  sqlx:
    level: error # info
    appenders:
      - stdout
      - file
    additive: false
